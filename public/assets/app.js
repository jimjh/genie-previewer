// Generated by CoffeeScript 1.4.0

/*
lesson.js
http://github.com/jimjh/genie-game
===
Copyright (c) 2012-2013 Jiunn Haur Lim, Carnegie Mellon University
*/


(function() {
  var Lesson, NavigationBar, Problem, RepoSwitch, Viewer, genie, includeCSRFToken, setContentType,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.genie == null) {
    this.genie = {};
  }

  genie = this.genie;

  Lesson = (function() {

    function Lesson() {}

    Lesson.prototype.SELECTOR = 'section[role="lesson"]';

    return Lesson;

  })();

  NavigationBar = (function() {

    NavigationBar.prototype.SELECTOR = Lesson.prototype.SELECTOR + ' .lesson-nav';

    NavigationBar.prototype.ANCHOR = Lesson.prototype.SELECTOR;

    function NavigationBar(opts) {
      this.ele = opts.bar;
      this.top = opts.anchor.offset().top - this.ele.outerHeight();
    }

    NavigationBar.prototype.stick = function() {
      var _this = this;
      $(window).scroll(function() {
        if (window.scrollY >= _this.top) {
          return _this.ele.css('top', 0);
        } else {
          return _this.ele.css('top', '');
        }
      });
      return this;
    };

    NavigationBar.prepare = function() {
      var anc, bar, nav;
      bar = $(NavigationBar.prototype.SELECTOR);
      anc = $(NavigationBar.prototype.ANCHOR);
      nav = new NavigationBar({
        bar: bar,
        anchor: anc
      });
      return nav.stick();
    };

    return NavigationBar;

  })();

  Problem = (function() {

    Problem.prototype.SELECTOR = Lesson.prototype.SELECTOR + ' form.problem';

    Problem.prepare = function(opts) {
      var form, pos, problem, problems, _i, _len, _results;
      problems = $(Problem.prototype.SELECTOR);
      _results = [];
      for (pos = _i = 0, _len = problems.length; _i < _len; pos = ++_i) {
        form = problems[pos];
        problem = new Problem($(form), opts.answers[pos], opts.lesson);
        _results.push(problem.observe());
      }
      return _results;
    };

    function Problem(form, answer, lesson) {
      this.form = form;
      this.answer = answer;
      this.lesson = lesson;
      this.submit = __bind(this.submit, this);

      if (this.answer != null) {
        this.preload();
      }
    }

    Problem.prototype.preload = function() {
      var cell, i, input, j, row, _ref, _results;
      switch ($.type(this.answer)) {
        case 'string':
        case 'number':
          this.form.find("input[name='answer']:not([type='radio'])").val(this.answer);
          return this.form.find("input[name='answer'][type='radio'][value='" + this.answer + "']").attr('checked', 'checked');
        default:
          _ref = this.answer;
          _results = [];
          for (i in _ref) {
            row = _ref[i];
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (j in row) {
                cell = row[j];
                input = this.form.find("input[name='answer[" + i + "][" + j + "]']");
                if ((input != null) && (cell != null)) {
                  _results1.push(input.val(cell));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          }
          return _results;
      }
    };

    Problem.prototype.observe = function() {
      var input,
        _this = this;
      this.form.find('input[type="radio"]:checked').next('span.custom.radio').addClass('checked');
      input = $('<input>').attr({
        type: 'hidden',
        name: 'lesson_id',
        value: this.lesson
      });
      return this.form.append(input).submit(function(e) {
        _this.submit();
        return false;
      });
    };

    Problem.prototype.submit = function() {
      var _this = this;
      return $.ajax({
        type: 'POST',
        url: '/answers',
        data: this.form.serialize(),
        success: function(answer) {
          return (_this.update(_this.form))(answer.results);
        },
        error: function() {
          return (_this.update(_this.form))(false);
        }
      });
    };

    Problem.prototype.update = function(form) {
      var _this = this;
      return function(results) {
        var cell, i, input, j, row;
        switch (results) {
          case true:
          case false:
            _this.toggle(form, results);
            break;
          default:
            for (i in results) {
              row = results[i];
              for (j in row) {
                cell = row[j];
                input = form.find("input[name='answer[" + i + "][" + j + "]']");
                (_this.update(input))(cell);
              }
            }
        }
        return null;
      };
    };

    Problem.prototype.toggle = function(form, result) {
      var buttons, field;
      field = this.extract(form);
      field.removeClass('success error');
      buttons = field.filter('span.custom.radio.checked');
      if (buttons.length === 0) {
        field.toggleClass('success', result);
        return field.toggleClass('error', !result);
      } else {
        buttons.toggleClass('success', result);
        return buttons.toggleClass('error', !result);
      }
    };

    Problem.prototype.extract = function(form) {
      var field;
      field = form.find('input[name="answer"], span.custom.radio');
      if (field.length === 0) {
        return form;
      } else {
        return field;
      }
    };

    return Problem;

  })();

  Viewer = (function() {

    Viewer.prototype.WINDOW_SELECTOR = Lesson.prototype.SELECTOR + ' .lesson-problems';

    Viewer.prototype.PAGINATOR_SELECTOR = Viewer.prototype.WINDOW_SELECTOR + ' .jqpagination';

    Viewer.prototype.PROBLEM_PREFIX = '#problem_';

    Viewer.prototype.PROBLEM_WRAPPER = '.problem-wrapper';

    function Viewer(opts) {
      this.window = opts.window;
      this.paginator = opts.paginator;
      this.top = this.window.offset().top;
      this.width = this.window.outerWidth();
    }

    Viewer.prototype.scroll = function() {
      var _this = this;
      $(window).scroll(function() {
        if (window.scrollY >= _this.top - 56) {
          _this.window.addClass('sticky');
          return _this.window.css('width', _this.width);
        } else {
          _this.window.removeClass('sticky');
          _this.window.css('width', '');
          return _this.width = _this.window.outerWidth();
        }
      });
      return this;
    };

    Viewer.prototype.paginate = function() {
      var _this = this;
      this.paginator.jqPagination({
        page_string: 'Problem {current_page} of {max_page}',
        paged: function(page) {
          _this.window.find("" + Viewer.prototype.PROBLEM_WRAPPER + ":not(.hide)").addClass('hide');
          return _this.window.find(Viewer.prototype.PROBLEM_PREFIX + (page - 1)).parent().removeClass('hide');
        }
      });
      return this;
    };

    Viewer.prepare = function() {
      var paginator, viewer, window;
      window = $(Viewer.prototype.WINDOW_SELECTOR);
      paginator = $(Viewer.prototype.PAGINATOR_SELECTOR);
      viewer = new Viewer({
        window: window,
        paginator: paginator
      });
      return viewer.scroll().paginate();
    };

    return Viewer;

  })();

  this.genie.init_lesson = function(options) {
    var a, answers, _i, _len, _ref;
    answers = [];
    _ref = options.answers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      answers[a.position] = a.content;
    }
    Problem.prepare({
      answers: answers,
      lesson: options.lesson
    });
    NavigationBar.prepare();
    return Viewer.prepare();
  };

  /*
  settings.js
  http://github.com/jimjh/genie-game
  ===
  Copyright (c) 2012-2013 Jiunn Haur Lim, Carnegie Mellon University
  */


  if (this.genie == null) {
    this.genie = {};
  }

  genie = this.genie;

  RepoSwitch = (function() {

    RepoSwitch.prototype.CODES = {
      published: 'green',
      publishing: 'yellow',
      failed: 'red',
      deactivated: 'red'
    };

    RepoSwitch.prototype.CLASSES = 'green yellow red hide';

    function RepoSwitch(form) {
      this.form = $(form);
    }

    RepoSwitch.prototype.observe = function() {
      var _this = this;
      this.form.bind('ajax:success', function(event, data, status, xhr) {
        _this.toggle_colors(data.status);
        if (xhr.status === 201) {
          return _this.update_id(data.id);
        }
      });
      this.form.bind('ajax:error', function(event, xhr) {
        var errors;
        errors = null;
        try {
          return errors = $.parseJSON(xhr.responseText).errors;
        } finally {
          _this.update_errors(errors);
        }
      });
      this.form.find('input[type="radio"]').click(function() {
        return _this.form.submit();
      });
      return this;
    };

    RepoSwitch.prototype.toggle_colors = function(status) {
      var lights;
      lights = this.form.closest('tr').find('.lesson-status');
      lights.removeClass(this.CLASSES).addClass(this.CODES[status]);
      return lights.find('span.has-tip').attr('title', status.capitalize()).attr('data-selector', null);
    };

    RepoSwitch.prototype.update_id = function(id) {
      var input;
      input = $('<input>').attr({
        name: 'id',
        type: 'hidden',
        value: id
      });
      return this.form.append(input);
    };

    RepoSwitch.prototype.update_errors = function(errors) {
      var field, list, messages, modal, msg, ul, _i, _len;
      modal = $('#errors');
      ul = modal.find('ul');
      console.log(errors);
      if (errors != null) {
        messages = (function() {
          var _results;
          _results = [];
          for (field in errors) {
            list = errors[field];
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = list.length; _i < _len; _i++) {
                msg = list[_i];
                _results1.push(field + ' ' + msg);
              }
              return _results1;
            })());
          }
          return _results;
        })();
        messages = [].concat.apply([], messages);
        ul.removeClass('hide').empty();
        for (_i = 0, _len = messages.length; _i < _len; _i++) {
          msg = messages[_i];
          ul.append($('<li>').html(msg));
        }
      } else {
        ul.addClass('hide');
      }
      return modal.foundation('reveal', 'open');
    };

    return RepoSwitch;

  })();

  this.genie.update_errors = function(errors) {};

  this.genie.init_settings = function(options) {
    var form, s, _i, _len, _ref;
    _ref = options.switches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      form = _ref[_i];
      s = new RepoSwitch(form);
      s.observe();
    }
    return null;
  };

  /*
  utils.js
  http://github.com/jimjh/genie-game
  ===
  Copyright (c) 2012-2013 Jiunn Haur Lim, Carnegie Mellon University
  */


  String.prototype.capitalize = function() {
    return this.substr(0, 1).toUpperCase() + this.substr(1);
  };

  includeCSRFToken = function() {
    return $.ajaxSetup({
      beforeSend: function(xhr) {
        var token;
        token = $('meta[name="csrf-token"]').attr('content');
        return xhr.setRequestHeader('X-CSRF-Token', token);
      }
    });
  };

  setContentType = function() {
    return $('a[data-remote="true"]').bind('ajax:beforeSend', function(event, xhr, settings) {
      if (settings.type === 'POST') {
        return xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      }
    });
  };

  $(function() {
    includeCSRFToken();
    return setContentType();
  });

}).call(this);
